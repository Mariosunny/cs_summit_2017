- Drink water from [nearest water source, farthest water source, most abundant water source, safest water source, least crowded water source, most crowded water source]
- Eat food from [nearest food source, farthest food source, most abundant food source, safest food source, least crowded food source, most crowded food source]

- Wander

Reproduce 
Grow Stronger
Attack [nearest enemy, farthest enemy, weakest enemy, strongest enemy]





When:
- size is x or greater
- size is x or less
- near x or more allies
- near x or less allies
- under attack
- not under attack
- food is x% or greater
- food is x% or less
- water is x% or greater
- water is x% or less


SPELL
fire blast
lightning bolt
freeze
heal


ITEMS
fishing rod - Used to catch fish from fishing spots. (1 wood)
hoe - Used to harvest wheat from farms. (1 wood)
pickaxe - Used to mine iron ore and gold ore. (1 wood)
bucket - Holds water. (1 wood)
hammer - Used to craft items. (1 wood)
road - Roads increase movement speed by 50%. (2 stone)
wood dagger - A dagger made of wood. High attack speed. (1 wood)
iron dagger - A dagger made of iron. High attack speed. (1 iron)
steel dagger - A dagger made of steel. High attack speed. (1 steel)
gem dagger - A dagger made of gems. High attack speed. (1 gems)
wood sword - A sword made of wood. Moderate attack speed. (2 wood)
iron sword - A sword made of iron. Moderate attack speed. (2 iron)
steel sword - A sword made of steel. Moderate attack speed. (2 steel)
gem sword - A sword made of gems. Moderate attack speed. (2 gems)
wood spear - A spear made of wood. Low attack speed, long range. (3 wood)
iron spear - A spear made of iron. Low attack speed, long range. (3 iron)
steel spear - A spear made of steel. Low attack speed, long range. (3 steel)
gem spear - A spear made of gems. Low attack speed, long range. (3 gems)
iron armor - Armor made of iron. Reduces incoming damage. (5 iron)
steel armor - Armor made of steel. Reduces incoming damage. (5 steel)
gem armor - Armor made of gems. Reduces incoming damage. (5 gems)
iron ore
iron ingot
steel ingot (2 iron ingot)
gold ore
gold ingot - A gold ingot.
gold coin - A gold coin. (1/10 gold ingot)
gold block - A block of gold. Equivalent to 5 gold ingots.
statue - (5 stone)
gold statue - (5 gold block)
gold ring (1 gold ingot)
diamond ring (1 gold ingot, 1 gem)
crown (2 gold ingot, 3 gem)
string - (1 wool)
bow - A bow made of wood and string. Moderate attack speed, long range, medium projectile speed. (2 wood, 1 string)
crossbow - A crossbow made of wood and iron. Low attack speed, medium range, high projectile speed. (2 wood, 1 iron)
arrow - An arrow made of wood and stone. (1/4 wood, 1/4 stone)
iron arrow - An arrow made of wood and iron.
fire arrow - An arrow made of wood, iron, and wool. Incenerates target.
steel arrow - An arrow made of wood and steel.
gem arrow - An arrow made of wood and gems.
stone - A block of stone. Used to construct buildings and some items.
wood
wheat
seeds
acorn
chest - Stores up to 100 item stacks when placed. (3 wood)
dough - A ball of dough. Place it in a furnace to make bread. (1 water, 1 wheat)
raw meat - A piece of raw meat. Place it in a furnace to cook it.
meat - A piece of cooked meat.
raw fish - A 
fish
bread
mana - An orb of mana.
sign - A wooden sign. Can be placed. (1 lumber)
knife - Used to slaughter livestock. (1 iron)
shears - Used to shear sheep for wool. (1 iron)
paper - A piece of paper. Used to write messages. (1/2 lumber)
wand - A magical wand. When equipped, enhances spellcasting abilities. (2 wood, 2 mana)
wizard hat - A magical hat. When equipped, enhances spellcasting abilities. (2 wool, 2 mana)



BLOCKS
gold ore
iron ore
stone
tree
fence
fence gate
stone wall
stone gate
door
chest
workbench
furnace
altar
sign
road


SKILLS
animal husbandry - Increases yield from slaughtering cows and shearing sheep.
fishing - Increases fishing speed. Reduces energy cost of fishing.
crafting - Increases crafting speed. Reduces energy cost of crafting.
smelting - Increases smelting speed. Reduces energy cost of smelting.
farming - Increases yield from harvesting wheat.
woodcutting - Increases woodcutting speed. Reduces energy cost of woodcutting.
mining - Increases mining speed. Reduces energy cost of mining.
construction - Increases construction speed. Reduces energy cost of construction.
combat - Increases melee/ranged damage.
magic - Increases effectiveness of spells.
stamina - Increases maximum energy. Reduces energy cost of movement.





CONDITIONS
Last said <message>
Said <message>
<nth> item in inventory is <type>
HP </>/<=/>= <number>
Skill </>/<=/>= <number>
<item> </>/<=/>= <number>
<x> <targets> within <y> tiles
<x> under attack by <y>
<x> mining iron
<x> smelting iron
<x> chopping wood
<x> in state <state>
Levels up <skill>
<x> can level up
number of <x> within <y>
waypoint set
waypoint deleted
<time> passed
burning
frozen
being healed



ACTIONS
Do <action> for <string> in <collection>
Feed <cow>
Slaughter <cow/sheep>
Shear <sheep>
Pause <time>
Place <block> at <location>
After <time> do <action>
Level up <stat>
Give <x> to <target>
Deposit <x> in <y>
Explore <location>
Court <ally>
Move to <target> relative to <target>
Follow <target>
Craft <item>
Heal <target>
Equip <equipment>
Attack <target>
Fish at <location>
Farm at <location>
Chop Wood at <location>
Mine Iron at <location>
Smelt Iron at <location>
Mine Stone at <location>
Gather Mana at <location>
Cast <spell>
Change role to <role>
Shout <message>
Say <message> to <target>
Level down <stat>
Set waypoint
Write message on sign
Write message on paper
Define area
Define waypoint
Set <variable> as <expression>
Commit Suicide
Set speed to <speed>

LOOPS
Loop <expression> times
For <variable>,... in <collection>



In the BLOB language, there is one primitive data type: string. Strings are sequences of characters that encapsulate numbers, text, or regular expressions. Strings have zero-based numbering.



A "second" primitive data type, null, is defined as the empty string (""). 



There is one data structure- the collection. Collections are a set of key-value pairs, where keys are unique strings and values are strings or collections. Internally, collections are implemented as associative arrays, but may also be treated as ordered arrays or sets. Like strings, collections have zero-based numbering.

Define x as ["a", "b", "c"]

{
"0": "a",
"1": "b",
"2": "c"
}



BUILT-IN FUNCTIONS

apply(string, function)

reduce(string, function)


range(size)
Returns an array of consequetive integers, beginning from zero and ending at size - 1.

range(4) -> [0, 1, 2, 3]


range(start, end, increment="1")
Returns an array of integers, beginning from start and ending at end - 1, with the specified increment.

range(1, 6, 2) -> [1, 3, 5]


split(string, separator=" ")
Splits the string according to a separator string, and returns the resulting array.

Set x as "a bc def"
split(x) -> ["a", "bc", "def"]
split(x, "") -> ["a", " ", "b", "c", " ", "d", "e", "f"]

length(string)
Returns the number of characters in the string.

Define x as "hello"
length(x) -> 5


length(collection)
Returns the number of key-value pairs in the collection.

Define x as [2, "5", 4]
length(x) -> 3


indexOf(string, searchString)
Returns null ("") if no match is found.


match(string, searchString)
Returns a collection of , where each key 



Set x to "abba bab bbab bab"
match(x, "bab") -> {"5": "bab", "10": "bab", "14": "bab"}


charAt(string, index)
Returns a string of the character at .

concat(string1, string2)
Combines two strings into a one string. Equivalent to the '+' non-numeric string concatenation operator.

concat(array1, array2)
Combines two collections into a single collection, treating each collection as an ordered array. The key in each key-value pair in the second collection is increased by the size of the first collection, effectively preserving the order of each array. Equivalent to the '+' array concatenation operator.

update(collection1, collection2)
Combines two collections into a single collection, treating each collection as an associative array. 



Eqivalent to the '+' associative array concatenation operator.


includes(string, searchString)
Returns 1 if the string contains the search string, 0 otherwise.

includes(collection, object)
Returns 1 if the collection contains the object as one of its values, 0 otherwise.

containsKey(collection, string)
Returns 1 if the collection contains the specified key


equals(string1, string2)
Returns 1 if the two strings are exactly equal, 0 otherwise. Case sensitive. 
Equivalent to the '==' string comparison operator.

equalsIgnoreCase(string1, string2)
Returns 1 if the two strings are exactly equal, 0 otherwise. Case insensitive. 
Equivalent to the '==' string comparison operator.

equals(collection1, collection2)
Equivalent to the '==' collection comparison operator.

sort(array, function="")
Returns the array, sorted in ascending order as defined by the function. The function should take two parameters and return 1 if the first parameter is greater than the second, 0 if they are equal, and -1 if the first parameter is less than the second. If no function is specified, the array is sorted by its natural order.

Set x as ["wood", "stone", "gold"]
sort(x) -> ["gold", "stone", "wood"]

shuffle(array)
Returns the array, shuffled randomly.

Set x as ["a", "b", "c", "d"]
shuffle(x) -> ["b", "c", "d", "a"]
shuffle(x) -> ["d", "b", "a", "c"]

join(collection, separator=" ")
Returns a string with each element of the collection concatenated, separated by a separator. Obeys fencepost principle.

Set x as ["hello", "world"]
join(x) -> "hello world"


getItemType(string)


keys(collection)
Returns an array of keys of the collection.

values(collection)
Returns an array of values of the collection.

reverse(collection)

filter(collection, function)

reduce(collection, function)

map(collection, function)

some(collection, function)

every(collection, function)

enumerate(collection)

remove(collection, index)

remove(string, index)

add(collection, object, index)

add(collection, string, index)

pop(array)
Removes and returns the last element from the array.

push(array, object)
Adds the specified object to the end of the array.

toString(object)

toFunction(string)



getSpeed()

getMaxSpeed()




E
PI

isBlob(string)

isItem(string)

isCoordinate(string)

isInteger(number)

isNumber(string)

abs(number)

acos(number)

acosh(number)

asin(number)

asinh(number)

atan(number)

atanh(number)

cos(number)

cosh(number)

log(number, base=E)

max(array)

min(array)

sqrt(number)

pow(number, exponent)

tan(number)

tanh(number)

floor(number)

ceil(number)

round(number)

random()
Returns a number 0.0 to 1.0, exclusive.

